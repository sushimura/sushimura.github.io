{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAoEeA,MAhEf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,gBACb,4CACA,mDACA,6DACA,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAAf,YACA,yBAAKA,UAAU,aACb,uBAAGC,KAAK,oMAAR,wCAKJ,yBAAKD,UAAU,OACb,yBAAKA,UAAU,YAAf,UACA,yBAAKA,UAAU,aACb,uBAAGC,KAAK,kBAAR,qBAIN,yBAAKD,UAAU,YACb,yBAAKA,UAAU,SAAf,mBACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,MAAf,WACA,yBAAKA,UAAU,MAAf,aAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,MAAf,WACA,yBAAKA,UAAU,MAAf,oBAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,MAAf,YACA,yBAAKA,UAAU,MAAf,oBAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,MAAf,cACA,yBAAKA,UAAU,MAAf,oBAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,MAAf,aACA,yBAAKA,UAAU,MAAf,oBAGF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,MAAf,WACA,yBAAKA,UAAU,MAAf,oBAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,MAAf,aACA,yBAAKA,UAAU,MAAf,0BC9CIE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.333bb92e.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"header-inner\">\n          <h1>SushiMura.ca</h1>\n          <h5>Japanese Restaurant</h5>\n          <h5>Website is under construction</h5>\n          <div className=\"container\">\n            <div className=\"info\">\n              <div className=\"row\">\n                <div className=\"title td\">Address:</div>\n                <div className=\"td second\">\n                  <a href=\"https://www.google.ca/maps/place/1021+McGill+Rd,+Kamloops,+BC+V2C+6H4/@50.6675878,-120.3716076,17z/data=!3m1!4b1!4m5!3m4!1s0x537e2c603588a45f:0x1de2279aa5974033!8m2!3d50.6675844!4d-120.3694189\">\n                    6485 Oak St, Vancouver, BC V6M 2W7\n                  </a>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"title td\">Phone:</div>\n                <div className=\"td second\">\n                  <a href=\"tel:2503141112\">(250) 314-1112</a>\n                </div>\n              </div>\n            </div>\n            <div className=\"business\">\n              <div className=\"title\">Business Hours:</div>\n              <div className=\"row\">\n                <div className=\"td\">Sunday:</div>\n                <div className=\"td\">12-9p.m.</div>\n              </div>\n              <div className=\"row\">\n                <div className=\"td\">Monday:</div>\n                <div className=\"td\">11a.m.-9.30p.m.</div>\n              </div>\n              <div className=\"row\">\n                <div className=\"td\">Tuesday:</div>\n                <div className=\"td\">11a.m.-9.30p.m.</div>\n              </div>\n              <div className=\"row\">\n                <div className=\"td\">Wednesday:</div>\n                <div className=\"td\">11a.m.-9.30p.m.</div>\n              </div>\n              <div className=\"row\">\n                <div className=\"td\">Thursday:</div>\n                <div className=\"td\">11a.m.-9.30p.m.</div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"td\">Friday:</div>\n                <div className=\"td\">11a.m.-9.30p.m.</div>\n              </div>\n              <div className=\"row\">\n                <div className=\"td\">Saturday:</div>\n                <div className=\"td\">11a.m.-9.30p.m.</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}